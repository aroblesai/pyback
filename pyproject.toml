[project]
name = "pyback"
version = "0.1.0"
description = "Modern async backend boilerplate built with FastAPI, PostgreSQL and SQLAlchemy"
authors = [{ name = "Alfredo Robles", email = "robalfara@gmail.com" }]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.14.1",
    "asyncpg>=0.30.0",
    "bcrypt>=4.2.1",
    "fastapi-limiter>=0.1.6",
    "fastapi[standard]>=0.115.8",
    "loguru>=0.7.3",
    "mkdocs-material>=9.6.5",
    "orjson>=3.10.13",
    "pydantic-settings>=2.7.1",
    "pydantic[email]>=2.10.4",
    "pyjwt>=2.10.1",
    "redis>=5.2.1",
    "sqlmodel>=0.0.22",
    "uvicorn>=0.34.0",
]

[project.scripts]
pyback = "pyback.main:main"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.6",
    "types-redis>=4.6.0.20241004",
    "sqlalchemy[mypy]>=2.0.38",
]

[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
fix = true
# unsafe-fixes = true
show-fixes = true
target-version = "py312"
line-length = 88
output-format = "concise"
extend-exclude = ["logs", "docs", "migrations", "*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
split-on-trailing-comma = false
lines-after-imports = 2
known-first-party = ["pyback"]
no-lines-before = ["future", "standard-library"]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
select = [
    "E",    # pycodestyle error
    "W",    # pycodestyle warning
    "F",    # pyflakes
    "A",    # flakes8-builtins
    "COM",  # flakes8-commas
    "C4",   # flake8-comprehensions
    "Q",    # flake8-quotes
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "I",    # isort
    "N",    # pep8 naming
    "UP",   # pyupgrade
    "S",    # bandit
    "D",    # pydocstyle
    "F401",
]
ignore = [
    "D100", # Missing docstring in public module
    # "D101", # Missing docstring in public class
    # "D102", # Missing docstring in public method
    # "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    # "D106", # Missing docstring in public nested class
    "D107", # undocumented-public-init
]
pydocstyle.convention = "google"

[tool.mypy]
python_version = "3.12"
files = ["src"]
exclude = ["tests"]
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
# strict = true
# install_types = true              # run with this setting to install missing types
warn_unused_configs = true
ignore_missing_imports = true
show_error_context = true
pretty = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
follow_imports_for_stubs = true
namespace_packages = true
show_absolute_path = true
show_column_numbers = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".git", "__pycache__"]
targets = ["src"]
skips = ["B101", "B104"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "-v",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-fail-under=70",
    "--cov-branch",
    "--cov-report=xml:./cover/coverage.xml",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.pytest_env]
# set dummy env variables so that tests can be run

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"
