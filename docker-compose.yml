services:
  app:
    container_name: ${COMPOSE_PROJECT_NAME}-app
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./src:/usr/app/src
    networks:
      - backend-network
    ports:
      - "${SERVER_PORT}:8000"
    expose:
      - ${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "curl --fail http://app:${SERVER_PORT}/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 30s
  db:
    container_name: postgres
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
    volumes:
      - ./src/${COMPOSE_PROJECT_NAME}/db/init:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    networks:
      - backend-network
    ports:
      - "${POSTGRES_PORT}:5432"
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 10
      timeout: 10s

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - backend-network

  redis:
    container_name: redis
    image: redis
    restart: always
    env_file:
      - .env
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    ports:
      - "${REDIS_PORT}:6379"
    expose:
      - ${REDIS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 10
      timeout: 10s

volumes:
  db-data:
  pgadmin-data:
  redis-data:

networks:
  backend-network:
    driver: bridge
